#!/usr/bin/env python

import sys
import os
import subprocess

input_sep = ','

# receives input, and if it grows past maxlen, output to $PAGER, else stdout
class Pager():
    MAXLEN = 15

    def __get_pager(self):
        if "PAGER" in os.environ and os.environ["PAGER"]:
            return os.environ["PAGER"]

        return "less"

    def close(self):
        if not self.can_page:
            pass
        elif self.is_paged:
            self.proc.stdin.close()
            self.proc.wait()
        else:
            sys.stdout.write(self.buf)

    def write(self, lines):
        if not self.can_page:
            sys.stdout.write(lines)
        elif self.is_paged:
            self.proc.stdin.write(lines)
        else:
            self.buf += lines
            if len(self.buf.splitlines()) > self.maxlen:
                self.is_paged = True
                self.proc = subprocess.Popen(self.__get_pager(),
                        stdin = subprocess.PIPE,
                        stdout = sys.stdout)
                self.proc.stdin.write(self.buf)
                self.buf = None

    def __init__(self, maxlen = MAXLEN):
        self.buf = ""
        self.maxlen = maxlen
        self.is_paged = False
        self.can_page = True
        self.proc = None
        if not sys.stdout.isatty():
            self.can_page = False



def collect_inputs():

    files = [file(x) for x in sys.argv[1:] if x != '-']
    if len(sys.argv) <= 1 or '-' in sys.argv or not sys.stdin.isatty():
        files.append(sys.stdin)

    return files


# find the maximum string length in each column
find_lengths = lambda d: reduce(lambda x, s: map(max, x, map(len, s)), d, [0])

# get all lines with >1 entry, and split them
# read_file = lambda fin: filter(lambda l: len(l) > 1, [line.strip().split(input_sep) for line in fin])
read_file = lambda fin: [line.strip().split(input_sep) for line in fin]

def main():

    input_files = collect_inputs()
    outfile = Pager()

    for fin in input_files:

        data = read_file(fin)
        lens = find_lengths(filter(lambda l: len(l) > 1, data))

        if len(input_files) > 1:
            outfile.write("==> %s <==" % fin.name)

        for line in data:
            for x,l in zip(line, lens):
                outfile.write(x.rjust(l+1))
            outfile.write("\n")

        if len(input_files) > 1:
            outfile.write("\n")

    outfile.close()


if __name__ == '__main__':
    try:
        main()
    except IOError:
        # ignore e.g. broken pipe if we don't eat all the output
        pass

